options
{
   LOOKAHEAD = 1;
   //FORCE_LA_CHECK = true;
}

PARSER_BEGIN(JmmCompiler)

import pt.up.fe.comp.jmm.JmmParser;
import pt.up.fe.comp.jmm.JmmParserResult;

import pt.up.fe.comp.jmm.report.*;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;

import java.io.*;

public class JmmCompiler
{
   List<Report> reports = new ArrayList<Report>();
   int parenthesisDepth = 0;

   public List<Report> getReports() {
      return this.reports;
   }

   public void addReport(Exception e, String message){
      reports.add(new Report(ReportType.ERROR, Stage.SYNTATIC, e.getStackTrace()[0].getLineNumber(), message));
   }
}


PARSER_END(JmmCompiler)

SKIP :
{
   // Whitespace
	" "
   | "\r"
   | "\t"
   | "\n"

   // Comments
   | < 
      "//"
      (
         ~["\n","\r"]
      )*
      ["\n","\r"] 
   > | < 
      "/*" 
      (
         (
            ~["*"] 
         ) | (
            ["*"] ~["/"]
         )
      )*
      "*/"
   >
}

TOKEN:
{   
   // Literals
   < INTEGER_LITERAL:  (["1"-"9"](["0"-"9"])* | "0") >
   | < BOOLEAN_LITERAL: "true"|"false" >
   
   // Punctuation
   | < SEMICOLON: ";" >
   | < OPEN_BRACES: "{" >
   | < CLOSE_BRACES: "}" >
   | < OPEN_PARENTHESIS: "(" >
   | < CLOSE_PARENTHESIS: ")" >
   | < OPEN_BRACKETS: "[" >
   | < CLOSE_BRACKETS: "]" >
   | < COMMA : "," >
   | < DOT : ".">

   // Import
   | < IMPORT: "import" >
   
   // Class Declaration
   | < CLASS: "class" >
   | < EXTENDS: "extends" >
   
   // Methods and attributes
   | < PUBLIC: "public" >
   | < STATIC: "static">
   | < VOID: "void" >
   | < MAIN: "main" >
   | < RETURN: "return" >
   | < LENGTH: "length" >
   | < NEW: "new" >
   | < THIS: "this" >

   // Types
   | < INT: "int" >
   | < BOOLEAN: "boolean">
   | < STRING: "String">
      
   // Logical Operators
   | < NOT: "!" >
   | < AND: "&&" >
   | < LT: "<" >

   // Arithmetic Operators
   | < PLUS: "+" >
   | < MINUS: "-" >
   | < MULT: "*" >
   | < DIV: "/" >

   // Attribution Operator
   | < EQUAL: "=" >
   
   // Decision
   | < IF: "if" >
   | < ELSE: "else" >

   // Loop
   | < WHILE: "while" >

   // Identifier   
   | < IDENTIFIER: (["a"-"z","A"-"Z","_","$"](["a"-"z","A"-"Z","0"-"9","_","$"])*) >
}

JAVACODE

void skipParenthesis() {
   Token t;
   boolean end = false;

   while(this.parenthesisDepth != 0) {
      t = getToken(1);
      System.out.println(t.image);
      switch (t.kind) {
         case OPEN_PARENTHESIS:
            this.parenthesisDepth++;
            break;
         case CLOSE_PARENTHESIS:
            this.parenthesisDepth--;
            break;
         case EOF:
            return;
         case OPEN_BRACES:
            this.parenthesisDepth = 0;
            return;
         default:
            break;
      }
      getNextToken();
   }
}

// ----------------------------------------------------------------
// Program
// ----------------------------------------------------------------

SimpleNode Program() : {}
{
   try {
      (
         ImportDeclaration()
      )*
      Class()
      <EOF>
   } catch(Exception e){
      System.err.println(e.getMessage());
      addReport(e, e.getMessage());
   }

   {return jjtThis;} 
}

// ----------------------------------------------------------------
// Import
// ----------------------------------------------------------------

void ImportDeclaration() : {String name; String imports;}
{
   <IMPORT>

   name = ImportName()
   (
      <DOT>
      imports = ImportName()
      {name += "." + imports;}
   )*

   <SEMICOLON>

   {jjtThis.put("name", name);}
}

String ImportName() #void : {Token name;}
{
   name = <IDENTIFIER>

   {return name.image;}
}

// ----------------------------------------------------------------
// Class
// ----------------------------------------------------------------

void Class() : {String name; String extendsName = null; int numberOfAttributes = 0; int numberOfMethods = 0;}
{
   <CLASS>
   name = Name()
   (
      <EXTENDS>
      extendsName = Name()
   )?
   <OPEN_BRACES>
   (
      AttributeDeclaration()
      {
         numberOfAttributes++;
      }
   )*
   #Attributes(numberOfAttributes)
   (
      MethodDeclaration()
      {
         numberOfMethods++;
      }
   )*
   #Methods(numberOfMethods)
   <CLOSE_BRACES>
   {
      jjtThis.put("name", name);
      if(extendsName != null)
         jjtThis.put("extends", extendsName);
   }
}

// ----------------------------------------------------------------
// Method
// ----------------------------------------------------------------

void MethodDeclaration() : {Token visibility; boolean isStatic = false; String type = "void"; String name = "main";}
{
   visibility = <PUBLIC>
   (
      (
         type = Type()
         name = Name()
         MethodArguments()
      ) | (
         <STATIC>
         {
            isStatic = true;
         }
         <VOID>
         <MAIN>
         MainArguments()
      )
   )
   <OPEN_BRACES>
   Body(type)
   <CLOSE_BRACES>

   {
      jjtThis.put("type", type);
      jjtThis.put("name", name);
      jjtThis.put("isStatic", String.valueOf(isStatic));
   }
}

void MethodArguments() #void : {int numberOfArguments = 0;}
{
   OpenParenthesis()
   (
      Argument()
      {
         numberOfArguments++;
      }
      (
         <COMMA>
         Argument()
         {
            numberOfArguments++;
         }
      )*
   )?
   CloseParenthesis()


   {
      if(numberOfArguments == 0)
         return;
   }

   #Arguments(numberOfArguments)
}

void Argument() : {String type; String identifier;}
{
   type = Type()
   identifier = Name()

   {
      jjtThis.put("name", identifier);
      jjtThis.put("type", type);
   }
}

void MainArguments() #void : {}
{
   OpenParenthesis()
   MainArgument()
   CloseParenthesis()
}

void MainArgument() : {String name;}
{
   <STRING>
   <OPEN_BRACKETS>
   <CLOSE_BRACKETS>
   name = Name()

   {
      jjtThis.put("name", name);
      jjtThis.put("type", "String[]");
   }
}

void Body(String type) : {}
{
   (
      MethodBody()
   )?
   Return(type)
}

void MethodBody() #void : {String name; String type;}
{
    LOOKAHEAD(2)
    (
        type = Type()
        name = Name()
        <SEMICOLON>
        VariableDeclaration(type, name)
        (
            MethodBody()
        )?
    ) | (
        Statement()
        MethodStatements()
    )
}

void MethodStatements() #void : {}
{
   (
      Statement()
   )*
}

void Return(String type) #void : {}
{
   {
      if(type == "void"){
         return;
      }
   }

   <RETURN>
   Expression()
   #Return(1)
   <SEMICOLON>
}

String Name() #void : {Token n;}
{
   n = <IDENTIFIER>

   {
      return n.image;
   }
}

// ----------------------------------------------------------------
// Variable Declaration
// ----------------------------------------------------------------

void VariableDeclaration(String type, String name) : {}
{
   {
      jjtThis.put("type", type);
      jjtThis.put("name", name);
   }
}

void AttributeDeclaration() : {String type; String name;}
{
   type = Type()
   name = Name()
   <SEMICOLON>
   {
      jjtThis.put("type", type);
      jjtThis.put("name", name);
   }
}

// ----------------------------------------------------------------
// Type
// ----------------------------------------------------------------

String Type() #void : {Token type; String nativeType;}
{
   (
      nativeType = NativeType()
      {
         return nativeType;
      }
   ) | (
      type = <IDENTIFIER>
      {
         return type.image;
      }
   )
}

String NativeType() #void : {Token type; boolean isArray = false;}
{
   (
      (
         type = <INT>
         (
            <OPEN_BRACKETS>
            <CLOSE_BRACKETS>
            {
               isArray = true;
            }
         )?
      ) | (
         type = <BOOLEAN>
      ) | (
         type = <STRING>
      )
   )

   {
      return type.image + (isArray ? "[]" : "");
   }
}

// ----------------------------------------------------------------
// Statement
// ----------------------------------------------------------------

void Statement() #void : {}
{
   (
      Block()
   ) | (
      If()
   ) | (
      While()
   ) | (
      Assignment()
      <SEMICOLON>
   )
}

void Block() : {}
{
   <OPEN_BRACES>
   (
      Statement()
   )*
   <CLOSE_BRACES>
}

void If() : {}
{
   <IF>
   Condition()
   Statement()
   #Then(1)
   <ELSE>
   Statement()
   #Else(1)
}

void While() : {}
{
   <WHILE>
   Condition()
   Statement()
}

void Assignment() #void : {}
{
   Expression()
   (
      <EQUAL>
      Expression()
      #Assignment(2)
   )?
}

void Condition() : {}
{
   try {
      OpenParenthesis()
      Expression()
      CloseParenthesis()
   } catch(ParseException e) {
      addReport(e, "Expected valid condition, ignoring the one provided");
      skipParenthesis();
   }
}

// ----------------------------------------------------------------
// Expression
// ----------------------------------------------------------------

void Expression() #void : {}
{
   ConjunctionExpression()
}

void ConjunctionExpression() #void : {}
{
   ComparisonExpression()
   (
      <AND>
      Operator("Conjunction")
      ConjunctionExpression()
      #Operation(3)
   )?
}

void ComparisonExpression() #void : {}
{
   AdditionExpression()
   (
      <LT>
      Operator("Comparison")
      ComparisonExpression()
      #Operation(3)
   )?
}

// ----------------------------------------------------------------
// Arithmetic Expression
// ----------------------------------------------------------------

void AdditionExpression() #void : {}
{
   SubtractionExpression()
   (
      <PLUS>
      Operator("Addition")
      AdditionExpression()
      #Operation(3)
   )?
}

void SubtractionExpression() #void : {}
{
   MultiplicationExpression()
   (
      <MINUS>
      Operator("Subtraction")
      SubtractionExpression()
      #Operation(3)
   )?
}

void MultiplicationExpression() #void : {}
{
   DivisionExpression()
   (
      <MULT>
      Operator("Multiplication")
      MultiplicationExpression()
      #Operation(3)
   )?
}

void DivisionExpression() #void : {}
{
    (
        NotExpression()
    ) | (
       AccessExpression()
       (
          <DIV>
          Operator("Division")
          DivisionExpression()
          #Operation(3)
       )?
   )
}

// ----------------------------------------------------------------
// Logical Expressions
// ----------------------------------------------------------------

void NotExpression() #void : {}
{
    <NOT>
    Operator("Negation")
    AccessExpression()
    #Operation(2)
}

// ----------------------------------------------------------------
// Variable Expressions
// ----------------------------------------------------------------

void AccessExpression() #void : {}
{
   ConstructionExpression()
   (
      (
         <OPEN_BRACKETS>
         Expression()
         #Position(1)
         <CLOSE_BRACKETS>
         #Access(2)
      ) | (
         (
            <DOT>
            Method()
            #Call(2)
         )
      )
   )*
}

void ConstructionExpression() #void : {}
{
   (
      ParenthesisExpression()
   ) | (
      <NEW>
      Construction()
   )
}

void Method() : {Token name;}
{
   (
      (
         name = <IDENTIFIER>
         OpenParenthesis()
         Arguments()
         CloseParenthesis()
      ) | (
         name = <LENGTH>
      )
   )

   {
      jjtThis.put("name", name.image);
   }
}

void Arguments() #void : {int numberOfArguments = 0;}
{
   (
      Expression()
      {
         numberOfArguments++;
      }
      (
         <COMMA>
         Expression()
         {
            numberOfArguments++;
         }
      )*

      #Arguments(numberOfArguments)
   )?
}

void Construction() : {Token t; boolean isArray = false;}
{
   (
      (
         t = <IDENTIFIER>
         OpenParenthesis()
         CloseParenthesis()
      ) | (
         t = <INT>
         <OPEN_BRACKETS>
         Expression()
         #Size(1)
         <CLOSE_BRACKETS>
         {
            isArray = true;
         }
      )
   )

   {
      jjtThis.put("type", t.image + (isArray ? "[]" : ""));
   }
}

// ----------------------------------------------------------------
// Terminal Expressions
// ----------------------------------------------------------------

void ParenthesisExpression() #void : {}
{
   (
      TerminalExpression()
   ) | (
      OpenParenthesis()
      Expression()
      CloseParenthesis()
   )
}

void TerminalExpression() #void : {Token t;}
{
   (
      t = <INTEGER_LITERAL>
      Literal(t.image, "int")
   ) | (
      t = <BOOLEAN_LITERAL>
      Literal(t.image, "boolean")
   ) | (
      t = <IDENTIFIER>
      Variable(t.image)
   ) | (
      This()
   )
}

// ----------------------------------------------------------------
// Terminal Nodes
// ----------------------------------------------------------------

void Literal(String value, String type) : {}
{
   {
      jjtThis.put("value", value);
      jjtThis.put("type", type);
   }
}

void Variable(String name) : {}
{
   {
      jjtThis.put("name", name);
   }
}

void This() : {}
{
   <THIS>
}

void Operator(String name) : {}
{
   {
      jjtThis.put("name", name);
   }
}

// ----------------------------------------------------------------
// Functional Nodes
// ----------------------------------------------------------------

void OpenParenthesis() #void : {}
{
   <OPEN_PARENTHESIS>
   {
      this.parenthesisDepth++;
   }
}

void CloseParenthesis() #void : {}
{
   <CLOSE_PARENTHESIS>
   {
      this.parenthesisDepth--;
   }
}