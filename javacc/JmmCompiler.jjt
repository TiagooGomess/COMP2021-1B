options
{
   LOOKAHEAD = 1;
   FORCE_LA_CHECK = true;
}

PARSER_BEGIN(JmmCompiler)

import pt.up.fe.comp.jmm.JmmParser;
import pt.up.fe.comp.jmm.JmmParserResult;

import pt.up.fe.comp.jmm.report.*;

import java.util.List;
import java.util.ArrayList;

import java.io.*;

public class JmmCompiler
{
   List<Report> reports = new ArrayList<Report>();
   int parenthesisDepth = 0;

   public List<Report> getReports() {
      return this.reports;
   }

   public void addReport(Exception e, String message){
      reports.add(new Report(ReportType.ERROR, Stage.SYNTATIC, e.getStackTrace()[0].getLineNumber(), message));
   }
}


PARSER_END(JmmCompiler)

SKIP :
{
   // Whitespace
	" "
   | "\r"
   | "\t"
   | "\n"

   // Comments
   | < 
      "//"
      (
         ~["\n","\r"]
      )*
      ["\n","\r"] 
   > | < 
      "/*" 
      (
         (
            ~["*"] 
         ) | (
            ["*"] ~["/"]
         )
      )*
      "*/"
   >
}

TOKEN:
{   
   // Literals
   < INTEGER_LITERAL:  (["1"-"9"](["0"-"9"])* | "0") >
   | < BOOLEAN_LITERAL: "true"|"false" >
   
   // Punctuation
   | < SEMICOLON: ";" >
   | < OPEN_BRACES: "{" >
   | < CLOSE_BRACES: "}" >
   | < OPEN_PARENTHESIS: "(" >
   | < CLOSE_PARENTHESIS: ")" >
   | < OPEN_BRACKETS: "[" >
   | < CLOSE_BRACKETS: "]" >
   | < COMMA : "," >
   | < DOT : ".">

   // Import
   | < IMPORT: "import" >
   
   // Class Declaration
   | < CLASS: "class" >
   | < EXTENDS: "extends" >
   
   // Methods and attributes
   | < PUBLIC: "public" >
   | < STATIC: "static">
   | < VOID: "void" >
   | < MAIN: "main" >
   | < STRING: "String" >
   | < RETURN: "return" >
   | < LENGTH: "length" >
   | < NEW: "new" >
   | < THIS: "this" >

   // Types
   | < INT: "int" >
   | < BOOLEAN: "boolean">
      
   // Logical Operators
   | < NOT: "!" >
   | < AND: "&&" >
   | < LT: "<" >

   // Arithmetic Operators
   | < PLUS: "+" >
   | < MINUS: "-" >
   | < MULT: "*" >
   | < DIV: "/" >

   // Attribution Operator
   | < EQUAL: "=" >
   
   // Decision
   | < IF: "if" >
   | < ELSE: "else" >

   // Loop
   | < WHILE: "while" >

   // Identifier   
   | < IDENTIFIER: (["a"-"z","A"-"Z","_","$"](["a"-"z","A"-"Z","0"-"9","_","$"])*) >
}

// https://www.cs.purdue.edu/homes/hosking/javacc/doc/errorrecovery.html
JAVACODE

void skipParenthesis() {
   ParseException e = generateParseException();  // generate the exception object.
   System.out.println(e.toString());  // print the error message
   Token t;
   boolean end = false;

   while(this.parenthesisDepth != 0) {
      t = getToken(1);
      System.out.println(t.image);
      switch (t.kind) {
         case OPEN_PARENTHESIS:
            this.parenthesisDepth++;
            break;
         case CLOSE_PARENTHESIS:
            this.parenthesisDepth--;
            break;
         case EOF:
            return;
         case OPEN_BRACES:
            this.parenthesisDepth = 0;
            return;
         default:
            break;
      }
      getNextToken();
   }
}

// ----------------------------------------------------------------
// Program
// ----------------------------------------------------------------

SimpleNode Program() : {}
{
   try {
      (
         ImportDeclaration()
      )*
      ClassDeclaration()

      <EOF>
   } catch(Exception e){
      System.err.println(e.getMessage());
      addReport(e, e.getMessage());
   }

   {return jjtThis;} 
}

// ----------------------------------------------------------------
// Import
// ----------------------------------------------------------------

void ImportDeclaration() : {}
{
   <IMPORT>

   ImportName()
   (
      <DOT>
      ImportName()
   )*

   <SEMICOLON>
}

void ImportName() : {}
{
   <IDENTIFIER>
}

// ----------------------------------------------------------------
// Class
// ----------------------------------------------------------------

void ClassDeclaration() : {}
{
   <CLASS>

   ClassName()
   
   (
      Extends()
   )?

   <OPEN_BRACES>

   (
      VariableDeclaration()
   )*
   (
      MethodDeclaration()
   )*

   <CLOSE_BRACES>
}

void ClassName() : {}
{
   <IDENTIFIER>
}

void Extends() : {}
{
   <EXTENDS>
   ClassName()
}

// ----------------------------------------------------------------
// Variable
// ----------------------------------------------------------------

void VariableDeclaration() : {}
{
   (
      VariableDeclarationWithoutIdentifier()
   ) | (
      VariableDeclarationWithIdentifier()
   )
}

void VariableDeclarationWithoutIdentifier() : {}
{
   TypeWithoutIdentifier()
   VariableName()
   <SEMICOLON>

   {jjtThis.put("name", "VariableDeclaration");}
}

void VariableDeclarationAfterIdentifier() : {}
{
   VariableName()
   <SEMICOLON>

   {jjtThis.put("name", "VariableDeclaration");}
}

void VariableDeclarationWithIdentifier() : {}
{
   VariableType()
   VariableName()
   <SEMICOLON>

   {jjtThis.put("name", "VariableDeclaration");}
}

void VariableType() : {}
{
   <IDENTIFIER>
}

void VariableName() : {}
{
   <IDENTIFIER>
}

// ----------------------------------------------------------------
// Method
// ----------------------------------------------------------------

void MethodDeclaration() : {}
{
   MethodVisibility()
   (
      (
         Type()
         MethodName()
         MethodOpenParenthesis()
         (
            MethodArgument()
            (
               <COMMA>
               MethodArgument()
            )*
         )?
         MethodCloseParenthesis()
         MethodImplementation()
      ) | (
         main()
      )
   )
}

void Return() : {}
{
   <RETURN>
   Expression()
   <SEMICOLON>
}

void main() : {}
{
   <STATIC>
   <VOID>
   <MAIN>
   MethodOpenParenthesis()
   <STRING>
   ArrayVariableBrackets()
   <IDENTIFIER>
   MethodCloseParenthesis()
   MainImplementation()
}

void MethodVisibility() : {}
{
   <PUBLIC>
}

void MethodName() : {}
{
   <IDENTIFIER>
}

void MethodOpenParenthesis() : {}
{
   <OPEN_PARENTHESIS>
   {this.parenthesisDepth++;}
}

void MethodCloseParenthesis() : {}
{
   <CLOSE_PARENTHESIS>
   {this.parenthesisDepth--;}
}

void MethodImplementation() : {}
{
   <OPEN_BRACES>
   (MethodBody())?
   Return()
   <CLOSE_BRACES>
}

void MainImplementation() : {}
{
   <OPEN_BRACES>
   (MethodBody())?
   <CLOSE_BRACES>
}

void MethodBody() : {}
{
   (
      <IDENTIFIER>
      (
         (
            VariableDeclarationAfterIdentifier()
            MethodBody()
         ) | (
            StatementAfterIdentifier()
            MethodStatements()
         )
      )
   ) | (
      (
         VariableDeclarationWithoutIdentifier()
         MethodBody()
      ) | (
         StatementWithoutIdentifier()
         MethodStatements()
      )
   )
}

void MethodStatements() : {} 
{
   (
      Statement()
   )*
}

void MethodArgument() : {}
{
   Type()
   MethodArgumentName()  
}

void MethodArgumentName() : {}
{
   <IDENTIFIER>
}

// ----------------------------------------------------------------
// Type
// ----------------------------------------------------------------

void Type() : {}
{
   TypeWithoutIdentifier()
   | TypeIdentifier()
}

void TypeIdentifier() : {Token type;}
{
   type = <IDENTIFIER>

   {jjtThis.put("name", type.image);}
}

void TypeWithoutIdentifier() : {Token type; boolean is_array = false;}
{
   (
      (
         type = <INT>
         (
            ArrayVariableBrackets(){
               is_array = true;
            }
         )?
      ) | (
         type = <BOOLEAN>
      ) | (
         type = <STRING>
      )
   )

   {jjtThis.put("name", type.image);}
}

void ArrayVariableBrackets() : {}
{
   <OPEN_BRACKETS>
   <CLOSE_BRACKETS>
}

// ----------------------------------------------------------------
// Statement
// ----------------------------------------------------------------

void Statement() : {}
{
   (
      (
         StatementWithoutIdentifier()
      ) | (
         <IDENTIFIER>
         StatementAfterIdentifier()
      )
   )
}

void StatementWithoutIdentifier() : {}
{
   (
      <OPEN_BRACES>
      (
         Statement()
      )*
      <CLOSE_BRACES>
   ) | (
      <IF>
      <OPEN_PARENTHESIS>
      {this.parenthesisDepth++;}
      Expression()
      <CLOSE_PARENTHESIS>
      {this.parenthesisDepth--;}
      Statement()
      <ELSE>
      Statement()
   ) | (
      <WHILE>
      <OPEN_PARENTHESIS>
      {this.parenthesisDepth++;}
      try {
         Expression()
         <CLOSE_PARENTHESIS>
         {this.parenthesisDepth--;}
      } catch(ParseException e) {
         addReport(e, "Expected valid while expression, ignoring the one provided");
         skipParenthesis();
      }
      Statement()
   ) | (
      ExpressionWithoutIdentifier()
      <SEMICOLON>
   )
}

void StatementAfterIdentifier() : {}
{
   (
      (
         <EQUAL>
         Expression()
         <SEMICOLON>
      ) | (
         ArrayPosition()
         (
            <EQUAL>
            Expression()
         )?
         <SEMICOLON>
      ) | (
         ExpressionWithoutArrayPosition()
         <SEMICOLON>
      )
   )
}

// ----------------------------------------------------------------
// Expression
// ----------------------------------------------------------------

void Expression() : {}
{
   (
      ExpressionWithoutIdentifier()
   ) | (
      <IDENTIFIER>
      ExpressionAfterIdentifier()
   )
}

void ExpressionWithoutIdentifier() : {}
{
   AndExpressionWithoutIdentifier()
}

void ExpressionAfterIdentifier() : {}
{
   AndExpressionAfterIdentifier()
}

void ExpressionWithoutArrayPosition() : {}
{
   AndExpressionWithoutArrayPosition()
}

// ----------------------------------------------------------------
// Logical Expressions
// ----------------------------------------------------------------

void AndExpression() : {}
{
   ComparisonExpression()
   RightAndExpression()
}

void AndExpressionWithoutIdentifier() : {}
{
   ComparisonExpressionWithoutIdentifier()
   RightAndExpression()
}

void AndExpressionAfterIdentifier() : {}
{
   ComparisonExpressionAfterIdentifier()
   RightAndExpression()
}

void AndExpressionWithoutArrayPosition() : {}
{
   ComparisonExpressionWithoutArrayPosition()
   RightAndExpression()
}

void RightAndExpression() : {}
{
   (
      <AND>
      AndExpression()
   )?
}

void ComparisonExpression() : {}
{
   AddSubExpression()
   RightComparisonExpression()
}

void ComparisonExpressionWithoutIdentifier() : {}
{
   AddSubExpressionWithoutIdentifier()
   RightComparisonExpression()
}

void ComparisonExpressionAfterIdentifier() : {}
{
   AddSubExpressionAfterIdentifier()
   RightComparisonExpression()
}

void ComparisonExpressionWithoutArrayPosition() : {}
{
   AddSubExpressionWithoutArrayPosition()
   RightComparisonExpression()
}

void RightComparisonExpression() : {}
{
   (
      <LT>
      ComparisonExpression()
   )?
}

// ----------------------------------------------------------------
// Arithmetic Expressions
// ----------------------------------------------------------------

void AddSubExpression() : {}
{
   MultDivExpression()
   RightAddSubExpression()
}

void AddSubExpressionWithoutIdentifier() : {}
{
   MultDivExpressionWithoutIdentifier()
   RightAddSubExpression()
}

void AddSubExpressionAfterIdentifier() : {}
{
   MultDivExpressionAfterIdentifier()
   RightAddSubExpression()
}

void AddSubExpressionWithoutArrayPosition() : {}
{
   MultDivExpressionWithoutArrayPosition()
   RightAddSubExpression()
}

void RightAddSubExpression() : {}
{
   (
      (
         <PLUS>
         AddSubExpression()
      ) | (
         <MINUS>
         AddSubExpression()
      )
   )?
}

void MultDivExpression() : {}
{
   NotExpression()
   RightMultDivExpression()
}

void MultDivExpressionWithoutIdentifier() : {}
{
   NotExpressionWithoutIdentifier()
   RightMultDivExpression()
}

void MultDivExpressionAfterIdentifier() : {}
{
   NotExpressionAfterIdentifier()
   RightMultDivExpression()
}

void MultDivExpressionWithoutArrayPosition() : {}
{
   NotExpressionWithoutArrayPosition()
   RightMultDivExpression()
}

void RightMultDivExpression() : {}
{
   (
      (
         <MULT>
         MultDivExpression()
      ) | (
         <DIV>
         MultDivExpression()
      )
   )?
}

// ----------------------------------------------------------------
// Not Expressions
// ----------------------------------------------------------------

void NotExpression() : {}
{
   ClassMemberExpression()
   | (
      <NOT>
      NotExpression()
   )
}

void NotExpressionWithoutIdentifier() : {}
{
   ClassMemberExpressionWithoutIdentifier()
   | (
      <NOT>
      NotExpression()
   )
}

void NotExpressionAfterIdentifier() : {}
{
   ClassMemberExpressionAfterIdentifier()
}

void NotExpressionWithoutArrayPosition() : {}
{
   (
      ClassMemberExpressionWithoutArrayPosition()
   )?
}

// ----------------------------------------------------------------
// Class Member Expressions
// ----------------------------------------------------------------

void ClassMemberExpression() : {}
{
   ParenthesisExpression()
   (
      (
         <DOT>
         (
            (
               <LENGTH>
            ) | (
               MethodCalls()
            )
         )
      ) | (
         <OPEN_BRACKETS>
         Expression()
         <CLOSE_BRACKETS>
      )
   )?
}

void ClassMemberExpressionWithoutIdentifier() : {}
{
   ParenthesisExpressionWithoutIdentifier()
   (
      (
         <DOT>
         (
            (
               <LENGTH>
            ) | (
               MethodCalls()
            )
         )
      ) | (
         <OPEN_BRACKETS>
         Expression()
         <CLOSE_BRACKETS>
      )
   )?
}

void ClassMemberExpressionAfterIdentifier() : {}
{
   (
      (
         ArrayPosition()
      ) | (
         ClassMemberExpressionWithoutArrayPosition()
      )
   )?
}

void ClassMemberExpressionWithoutArrayPosition() : {}
{
   <DOT>
   (
      (
         <LENGTH>
      ) | (
         MethodCalls()
      )
   )
}

// ----------------------------------------------------------------
// Parenthesis Expressions
// ----------------------------------------------------------------

void ParenthesisExpression() : {}
{
   TerminalExpression()
   | (
      <OPEN_PARENTHESIS>
      {this.parenthesisDepth++;}
      Expression()
      <CLOSE_PARENTHESIS>
      {this.parenthesisDepth--;}
   )
}

void ParenthesisExpressionWithoutIdentifier() : {}
{
   TerminalExpressionWithoutIdentifier()
   | (
      <OPEN_PARENTHESIS>
      {this.parenthesisDepth++;}
      Expression()
      <CLOSE_PARENTHESIS>
      {this.parenthesisDepth--;}
   )
}

// ----------------------------------------------------------------
// Terminal Expressions
// ----------------------------------------------------------------

void TerminalExpression() : {Token t;}
{
   (
      (
         t = <INTEGER_LITERAL>
      ) | (
         t = <BOOLEAN_LITERAL>
      ) | (
         t = <THIS>
      ) | (
         t = <NEW>
         (
            (
               <INT>
               ArrayPosition()
            ) | (
               <IDENTIFIER>
               <OPEN_PARENTHESIS>
               <CLOSE_PARENTHESIS>
            )
         )
      ) | (
         t = <IDENTIFIER>
      )
   )

   { jjtThis.put("name", t.image); }
}

void TerminalExpressionWithoutIdentifier() : {Token t;}
{
   (
      (
         t = <INTEGER_LITERAL>
      ) | (
         t = <BOOLEAN_LITERAL>
      ) | (
         t = <THIS>
      ) | (
         t = <NEW>
         (
            (
               <INT>
               ArrayPosition()
            ) | (
               <IDENTIFIER>
               <OPEN_PARENTHESIS>
               <CLOSE_PARENTHESIS>
            )
         )
      )
   )

   { jjtThis.put("name", t.image); }
}

// ----------------------------------------------------------------
// Sub Expressions
// ----------------------------------------------------------------

void MethodCalls() : {}
{
   MethodCall()
   (
      <DOT>
      MethodCall()
   )*
}

void MethodCall() : {}
{
   <IDENTIFIER>
   MethodCallArguments()
}

void MethodCallArguments() : {}
{
   <OPEN_PARENTHESIS>
   {this.parenthesisDepth++;}
   (
      Expression()
      (
         <COMMA>
         Expression()
      )*
   )?
   <CLOSE_PARENTHESIS>
   {this.parenthesisDepth--;}
}

void ArrayPosition() : {}
{
   <OPEN_BRACKETS>
   Expression()
   <CLOSE_BRACKETS>
}