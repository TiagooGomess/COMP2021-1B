options
{
   LOOKAHEAD = 1;
   FORCE_LA_CHECK = true;
}

PARSER_BEGIN(JmmCompiler)

import pt.up.fe.comp.jmm.JmmParser;
import pt.up.fe.comp.jmm.JmmParserResult;

import pt.up.fe.comp.jmm.report.*;

import java.util.List;
import java.util.ArrayList;

import java.io.*;

public class JmmCompiler
{
   List<Report> reports = new ArrayList<Report>();
   int parenthesisDepth = 0;

   public List<Report> getReports() {
      return this.reports;
   }

   public void addReport(Exception e, String message){
      reports.add(new Report(ReportType.ERROR, Stage.SYNTATIC, e.getStackTrace()[0].getLineNumber(), message));
   }
}


PARSER_END(JmmCompiler)

SKIP :
{
   // Whitespace
	" "
   | "\r"
   | "\t"
   | "\n"

   // Comments
   | < 
      "//"
      (
         ~["\n","\r"]
      )*
      ["\n","\r"] 
   > | < 
      "/*" 
      (
         (
            ~["*"] 
         ) | (
            ["*"] ~["/"]
         )
      )*
      "*/"
   >
}

TOKEN:
{   
   // Literals
   < INTEGER_LITERAL:  (["1"-"9"](["0"-"9"])* | "0") >
   | < BOOLEAN_LITERAL: "true"|"false" >
   
   // Punctuation
   | < SEMICOLON: ";" >
   | < OPEN_BRACES: "{" >
   | < CLOSE_BRACES: "}" >
   | < OPEN_PARENTHESIS: "(" >
   | < CLOSE_PARENTHESIS: ")" >
   | < OPEN_BRACKETS: "[" >
   | < CLOSE_BRACKETS: "]" >
   | < COMMA : "," >
   | < DOT : ".">

   // Import
   | < IMPORT: "import" >
   
   // Class Declaration
   | < CLASS: "class" >
   | < EXTENDS: "extends" >
   
   // Methods and attributes
   | < PUBLIC: "public" >
   | < STATIC: "static">
   | < VOID: "void" >
   | < MAIN: "main" >
   | < STRING: "String" >
   | < RETURN: "return" >
   | < LENGTH: "length" >
   | < NEW: "new" >
   | < THIS: "this" >

   // Types
   | < INT: "int" >
   | < BOOLEAN: "boolean">
      
   // Logical Operators
   | < NOT: "!" >
   | < AND: "&&" >
   | < LT: "<" >

   // Arithmetic Operators
   | < PLUS: "+" >
   | < MINUS: "-" >
   | < MULT: "*" >
   | < DIV: "/" >

   // Attribution Operator
   | < EQUAL: "=" >
   
   // Decision
   | < IF: "if" >
   | < ELSE: "else" >

   // Loop
   | < WHILE: "while" >

   // Identifier   
   | < IDENTIFIER: (["a"-"z","A"-"Z","_","$"](["a"-"z","A"-"Z","0"-"9","_","$"])*) >
}

// https://www.cs.purdue.edu/homes/hosking/javacc/doc/errorrecovery.html
JAVACODE

void skipParenthesis() {
   ParseException e = generateParseException();  // generate the exception object.
   System.out.println(e.toString());  // print the error message
   Token t;
   boolean end = false;

   while(this.parenthesisDepth != 0) {
      t = getToken(1);
      System.out.println(t.image);
      switch (t.kind) {
         case OPEN_PARENTHESIS:
            this.parenthesisDepth++;
            break;
         case CLOSE_PARENTHESIS:
            this.parenthesisDepth--;
            break;
         case EOF:
            return;
         case OPEN_BRACES:
            this.parenthesisDepth = 0;
            return;
         default:
            break;
      }
      getNextToken();
   }
}

// ----------------------------------------------------------------
// Program
// ----------------------------------------------------------------

SimpleNode Program() : {}
{
   try {
      (
         ImportDeclaration()
      )*
      ClassDeclaration()

      <EOF>
   } catch(Exception e){
      System.err.println(e.getMessage());
      addReport(e, e.getMessage());
   }

   {return jjtThis;} 
}

// ----------------------------------------------------------------
// Import
// ----------------------------------------------------------------

void ImportDeclaration() : {String name; String imports;}
{
   <IMPORT>

   name = ImportName()
   (
      <DOT>
      imports = ImportName()
      {name += "." + imports;}
   )*

   <SEMICOLON>

   {jjtThis.put("name", name);}
}

String ImportName() #void : {Token name;}
{
   name = <IDENTIFIER>

   {return name.image;}
}

// ----------------------------------------------------------------
// Class
// ----------------------------------------------------------------

void ClassDeclaration() : {String className; String extendsName = null;}
{
   <CLASS>

   className = ClassName()
   
   (
      extendsName = Extends()
   )?

   <OPEN_BRACES>

   (
      VariableDeclaration()
   )*
   (
      MethodDeclaration()
   )*

   <CLOSE_BRACES>

   {
      jjtThis.put("name", className);
      if(extendsName != null)
         jjtThis.put("extends", extendsName);
   }
}

String ClassName() #void : {Token name;}
{
   name = <IDENTIFIER>

   {return name.image;}
}

String Extends() #void : {String name;}
{
   <EXTENDS>
   name = ClassName()
   {return name;}
}

// ----------------------------------------------------------------
// Variable
// ----------------------------------------------------------------

void VariableDeclaration() : {}
{
   (
      VariableDeclarationWithoutIdentifier()
   ) | (
      VariableDeclarationWithIdentifier()
   )
}

void VariableDeclarationWithoutIdentifier() : {}
{
   TypeWithoutIdentifier()
   VariableName()
   <SEMICOLON>
}

void VariableDeclarationAfterIdentifier(String type) : {}
{
   VariableName()
   <SEMICOLON>
}

void VariableDeclarationWithIdentifier() : {}
{
   VariableType()
   VariableName()
   <SEMICOLON>
}

void VariableType() : {Token type;}
{
   type = <IDENTIFIER>

   {jjtThis.put("type", type.image);}
}

void VariableName() : {Token name;}
{
   name = <IDENTIFIER>

   {jjtThis.put("name", name.image);}
}

// ----------------------------------------------------------------
// Method
// ----------------------------------------------------------------

void MethodDeclaration() #void : {}
{
   MethodVisibility()
   (
      (
         Type()
         MethodName()
         MethodOpenParenthesis()
         (
            MethodArgument()
            (
               <COMMA>
               MethodArgument()
            )*
         )?
         MethodCloseParenthesis()
         MethodImplementation()
      ) | (
         main()
      )
   )
}

void Return() #void : {}
{
   <RETURN>
   Expression()
   <SEMICOLON>
}

void main() #void : {}
{
   <STATIC>
   <VOID>
   <MAIN>
   MethodOpenParenthesis()
   <STRING>
   ArrayVariableBrackets()
   <IDENTIFIER>
   MethodCloseParenthesis()
   MainImplementation()
}

void MethodVisibility() #void : {}
{
   <PUBLIC>
}

void MethodName() #void : {}
{
   <IDENTIFIER>
}

void MethodOpenParenthesis() #void : {}
{
   <OPEN_PARENTHESIS>
   {this.parenthesisDepth++;}
}

void MethodCloseParenthesis() #void : {}
{
   <CLOSE_PARENTHESIS>
   {this.parenthesisDepth--;}
}

void MethodImplementation() #void : {}
{
   <OPEN_BRACES>
   (MethodBody())?
   Return()
   <CLOSE_BRACES>
}

void MainImplementation() #void : {}
{
   <OPEN_BRACES>
   (MethodBody())?
   <CLOSE_BRACES>
}

void MethodBody() #void : {Token identifier;}
{
   (
      identifier = <IDENTIFIER>
      (
         (
            VariableDeclarationAfterIdentifier(identifier.image)
            MethodBody()
         ) | (
            StatementAfterIdentifier(identifier.image)
            MethodStatements()
         )
      )
   ) | (
      (
         VariableDeclarationWithoutIdentifier()
         MethodBody()
      ) | (
         StatementWithoutIdentifier()
         MethodStatements()
      )
   )
}

void MethodStatements() #void : {} 
{
   (
      Statement()
   )*
}

void MethodArgument() #void : {}
{
   Type()
   MethodArgumentName()  
}

void MethodArgumentName() #void : {}
{
   <IDENTIFIER>
}

// ----------------------------------------------------------------
// Type
// ----------------------------------------------------------------

void Type() #void : {}
{
   TypeWithoutIdentifier()
   | TypeIdentifier()
}

void TypeIdentifier() #void : {}
{
   <IDENTIFIER>
}

void TypeWithoutIdentifier() #void : {}
{
   (
      (
         <INT>
         (
            ArrayVariableBrackets()
         )?
      ) | (
         <BOOLEAN>
      ) | (
         <STRING>
      )
   )
}

void ArrayVariableBrackets() #void : {}
{
   <OPEN_BRACKETS>
   <CLOSE_BRACKETS>
}

// ----------------------------------------------------------------
// Statement
// ----------------------------------------------------------------

void Statement() #void : {Token identifier;}
{
   (
      (
         StatementWithoutIdentifier()
      ) | (
         identifier = <IDENTIFIER>
         StatementAfterIdentifier(identifier.image)
      )
   )
}

void StatementWithoutIdentifier() #void : {}
{
   (
      <OPEN_BRACES>
      (
         Statement()
      )*
      <CLOSE_BRACES>
   ) | (
      <IF>
      <OPEN_PARENTHESIS>
      {this.parenthesisDepth++;}
      Expression()
      <CLOSE_PARENTHESIS>
      {this.parenthesisDepth--;}
      Statement()
      <ELSE>
      Statement()
   ) | (
      <WHILE>
      <OPEN_PARENTHESIS>
      {this.parenthesisDepth++;}
      try {
         Expression()
         <CLOSE_PARENTHESIS>
         {this.parenthesisDepth--;}
      } catch(ParseException e) {
         addReport(e, "Expected valid while expression, ignoring the one provided");
         skipParenthesis();
      }
      Statement()
   ) | (
      ExpressionWithoutIdentifier()
      <SEMICOLON>
   )
}

void StatementAfterIdentifier(String identifier) #void : {}
{
   (
      (
         <EQUAL>
         Expression()
         <SEMICOLON>
      ) | (
         ArrayPosition()
         (
            <EQUAL>
            Expression()
         )?
         <SEMICOLON>
      ) | (
         ExpressionWithoutArrayPosition(identifier)
         <SEMICOLON>
      )
   )
}

// ----------------------------------------------------------------
// Expression
// ----------------------------------------------------------------

void Expression() #void : {Token identifier;}
{
   (
      ExpressionWithoutIdentifier()
   ) | (
      identifier = <IDENTIFIER>
      ExpressionAfterIdentifier(identifier.image)
   )
}

void ExpressionWithoutIdentifier() #void : {}
{
   AndExpressionWithoutIdentifier()
}

void ExpressionAfterIdentifier(String identifier) #void : {}
{
   AndExpressionAfterIdentifier(identifier)
}

void ExpressionWithoutArrayPosition(String identifier) #void : {}
{
   AndExpressionWithoutArrayPosition(identifier)
}

// ----------------------------------------------------------------
// Logical Expressions
// ----------------------------------------------------------------

void AndExpression() #void : {}
{
   ComparisonExpression()
   RightAndExpression()
}

void AndExpressionWithoutIdentifier() #void : {}
{
   ComparisonExpressionWithoutIdentifier()
   RightAndExpression()
}

void AndExpressionAfterIdentifier(String identifier) #void : {}
{
   ComparisonExpressionAfterIdentifier(identifier)
   RightAndExpression()
}

void AndExpressionWithoutArrayPosition(String identifier) #void : {}
{
   ComparisonExpressionWithoutArrayPosition(identifier)
   RightAndExpression()
}

void RightAndExpression() #void : {}
{
   (
      <AND>
      AndExpression()
   )?
}

void ComparisonExpression() #void : {}
{
   AddSubExpression()
   RightComparisonExpression()
}

void ComparisonExpressionWithoutIdentifier() #void : {}
{
   AddSubExpressionWithoutIdentifier()
   RightComparisonExpression()
}

void ComparisonExpressionAfterIdentifier(String identifier) #void : {}
{
   AddSubExpressionAfterIdentifier(identifier)
   RightComparisonExpression()
}

void ComparisonExpressionWithoutArrayPosition(String identifier) #void : {}
{
   AddSubExpressionWithoutArrayPosition(identifier)
   RightComparisonExpression()
}

void RightComparisonExpression() #void : {}
{
   (
      <LT>
      ComparisonExpression()
   )?
}

// ----------------------------------------------------------------
// Arithmetic Expressions
// ----------------------------------------------------------------

void AddSubExpression() #void : {}
{
   MultDivExpression()
   (
      (
         <PLUS>
         AddSubExpression()
      ) | (
         <MINUS>
         AddSubExpression()
      )
   )?
}

void AddSubExpressionWithoutIdentifier() #void : {}
{
   MultDivExpressionWithoutIdentifier()
   (
      (
         <PLUS>
         AddSubExpression()
      ) | (
         <MINUS>
         AddSubExpression()
      )
   )?
}

void AddSubExpressionAfterIdentifier(String identifier) #void : {}
{
   MultDivExpressionAfterIdentifier(identifier)
   (
      (
         <PLUS>
         AddSubExpression()
         #Operation
      ) | (
         <MINUS>
         AddSubExpression()
      )
   )?
}

void AddSubExpressionWithoutArrayPosition(String identifier) #void : {}
{
   MultDivExpressionWithoutArrayPosition(identifier)
   (
      (
         <PLUS>
         AddSubExpression()
      ) | (
         <MINUS>
         AddSubExpression()
      )
   )?
}

void MultDivExpression() #void : {}
{
   NotExpression()
   RightMultDivExpression()
}

void MultDivExpressionWithoutIdentifier() #void : {}
{
   NotExpressionWithoutIdentifier()
   RightMultDivExpression()
}

void MultDivExpressionAfterIdentifier(String identifier) #void : {}
{
   NotExpressionAfterIdentifier(identifier)
   RightMultDivExpression()
}

void MultDivExpressionWithoutArrayPosition(String identifier) #void : {}
{
   NotExpressionWithoutArrayPosition(identifier)
   RightMultDivExpression()
}

void RightMultDivExpression() #void : {}
{
   (
      (
         <MULT>
         MultDivExpression()
      ) | (
         <DIV>
         MultDivExpression()
      )
   )?
}

// ----------------------------------------------------------------
// Not Expressions
// ----------------------------------------------------------------

void NotExpression() #void : {}
{
   ClassMemberExpression()
   | (
      <NOT>
      Negation()
   )
}

void NotExpressionWithoutIdentifier() #void : {}
{
   ClassMemberExpressionWithoutIdentifier()
   | (
      <NOT>
      Negation()
   )
}

void NotExpressionAfterIdentifier(String identifier) #void : {}
{
   ClassMemberExpressionAfterIdentifier(identifier)
}

void NotExpressionWithoutArrayPosition(String identifier) #void : {}
{
   (
      ClassMemberExpressionWithoutArrayPosition(identifier)
   )?
}

void Negation() : {}
{
   NotExpression()
}

// ----------------------------------------------------------------
// Class Member Expressions
// ----------------------------------------------------------------

void ClassMemberExpression() #void : {}
{
   ParenthesisExpression()
   (
      (
         RightClassMemberExpression("IDENTIFIER")
      ) | (
         <OPEN_BRACKETS>
         Expression()
         <CLOSE_BRACKETS>
      )
   )?
}

void ClassMemberExpressionWithoutIdentifier() #void : {}
{
   ParenthesisExpressionWithoutIdentifier()
   (
      (
         RightClassMemberExpression("IDENTIFIER")
      ) | (
         <OPEN_BRACKETS>
         Expression()
         <CLOSE_BRACKETS>
      )
   )?
}

void ClassMemberExpressionAfterIdentifier(String identifier) #void : {}
{
   (
      (
         ArrayPosition()
      ) | (
         ClassMemberExpressionWithoutArrayPosition(identifier)
      )
   )?
}

void ClassMemberExpressionWithoutArrayPosition(String identifier) #void : {}
{
   RightClassMemberExpression(identifier)
}

void RightClassMemberExpression(String identifier) #void : {}
{
   <DOT>
   (
      (
         <LENGTH>
      ) | (
         MethodCalls()
      )
   )
}

// ----------------------------------------------------------------
// Parenthesis Expressions
// ----------------------------------------------------------------

void ParenthesisExpression() #void : {}
{
   TerminalExpression()
   | (
      <OPEN_PARENTHESIS>
      {this.parenthesisDepth++;}
      Expression()
      <CLOSE_PARENTHESIS>
      {this.parenthesisDepth--;}
   )
}

void ParenthesisExpressionWithoutIdentifier() #void : {}
{
   TerminalExpressionWithoutIdentifier()
   | (
      <OPEN_PARENTHESIS>
      {this.parenthesisDepth++;}
      Expression()
      <CLOSE_PARENTHESIS>
      {this.parenthesisDepth--;}
   )
}

// ----------------------------------------------------------------
// Terminal Expressions
// ----------------------------------------------------------------

void TerminalExpression() #void : {}
{
   (
      (
         TerminalExpressionWithoutIdentifier()
      ) | (
         VariableToRead()
      )
   )
}

void VariableToRead() #void : {Token name;}
{
   name = <IDENTIFIER>
   Variable(name.image)
}

void Variable(String name) : {}
{
   {
      jjtThis.put("name", name);
   }
}

void TerminalExpressionWithoutIdentifier() #void : {}
{
   (
      (
         Integer()
      ) | (
         Boolean()
      ) | (
         This()
      ) | (
         <NEW>
         Construction()
      )
   )
}

void Integer() : {Token value;}
{
   value = <INTEGER_LITERAL>
   {jjtThis.put("value", value.image);}
}

void Boolean() : {Token value;}
{
   value = <BOOLEAN_LITERAL>
   {jjtThis.put("value", value.image);}
}

void This() : {}
{
   <THIS>
}

void Construction() : {Token type; int size = 0; boolean isArray = false;}
{
   (
      (
         type = <INT>
         Size()
         {isArray = true;}
      ) | (
         type = <IDENTIFIER>
         <OPEN_PARENTHESIS>
         <CLOSE_PARENTHESIS>
      )
   )
   {jjtThis.put("type", type.image + (isArray ? "[]" : ""));}
}

void Size() : {}
{
   <OPEN_BRACKETS>
   Expression()
   <CLOSE_BRACKETS>
}

// ----------------------------------------------------------------
// Sub Expressions
// ----------------------------------------------------------------

void MethodCalls() #void : {}
{
   MethodCall()
   (
      <DOT>
      MethodCall()
   )*
}

void MethodCall() #void : {}
{
   <IDENTIFIER>
   MethodCallArguments()
}

void MethodCallArguments() #void : {}
{
   <OPEN_PARENTHESIS>
   {this.parenthesisDepth++;}
   (
      Expression()
      (
         <COMMA>
         Expression()
      )*
   )?
   <CLOSE_PARENTHESIS>
   {this.parenthesisDepth--;}
}

void ArrayPosition() #void : {}
{
   <OPEN_BRACKETS>
   Expression()
   <CLOSE_BRACKETS>
}