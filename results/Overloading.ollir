Overloading {
  .construct Overloading().V {
    invokespecial(this, "<init>").V;
  }
  .method public sum(a.i32, b.i32).i32 {
    _aux1.i32 :=.i32 $1.a.i32 +.i32 $2.b.i32;
    ret.i32 _aux1.i32;
  }
  .method public sum(a.i32, b.i32, c.i32).i32 {
    _aux2.i32 :=.i32 $2.b.i32 +.i32 $3.c.i32;
    _aux3.i32 :=.i32 $1.a.i32 +.i32 _aux2.i32;
    ret.i32 _aux3.i32;
  }
  .method public sum(a.i32, b.i32, negated.bool).i32 {
    if ($3.negated.bool &&.bool 1.bool) goto then1;
      _aux4.i32 :=.i32 invokevirtual(this, "sum", $1.a.i32, $2.b.i32).i32;
      result.i32 :=.i32 _aux4.i32;
      goto endif1;
    then1:
      _aux5.i32 :=.i32 invokevirtual(this, "sum", $1.a.i32, $2.b.i32).i32;
      _aux6.i32 :=.i32 0.i32 -.i32 _aux5.i32;
      result.i32 :=.i32 _aux6.i32;
    endif1:
    ret.i32 result.i32;
  }
  .method public static main(args.array.String).V {
    _aux7.Overloading :=.Overloading new(Overloading).Overloading;
    invokespecial(_aux7.Overloading, "<init>").V;
    t.Overloading :=.Overloading _aux7.Overloading;
    _aux8.i32 :=.i32 invokevirtual(t.Overloading, "sum", 1.i32, 2.i32).i32;
    invokestatic(io, "println", _aux8.i32).V;
    _aux9.i32 :=.i32 invokevirtual(t.Overloading, "sum", 1.i32, 1.bool).i32;
    invokestatic(io, "println", _aux9.i32).V;
    _aux10.i32 :=.i32 invokevirtual(t.Overloading, "sum", 1.i32, 2.i32, 3.i32).i32;
    invokestatic(io, "println", _aux10.i32).V;
    _aux11.i32 :=.i32 invokevirtual(t.Overloading, "sum", 1.i32, 2.i32, 1.bool).i32;
    invokestatic(io, "println", _aux11.i32).V;
  }
}